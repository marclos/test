\documentclass{article}
%\usepackage{media9}
\usepackage{amsmath}
\usepackage{physics}

<<setup, echo=FALSE>>=
library(xtable)
@

\title{Epidemiology -- Human, Disease Vectors, Water Borne Illnesses}
\author{Marc Los Huertos}

\begin{document}

\maketitle

\section{Introduction}

\subsection{Disease, Pandemics, and Mathematical Epidemiology}

COVID-19 began rapidly spreading around the world in late 2019. And by the spring, Italy went into lock down, California declared a state of emergency, schools and universities around the globe suspended in person classes and events, and businesses reduced travel and pushed tele-work policies. All of this was designed to slow the spread of the disease. These efforts are broadly referred to as social distancing.

\subsection{Disease Spread and Control}

The contagious nature of diseases has been appreciated for hundreds, if not thousands of years. However, until 'germ' theory as articulated by Louis Pastuer, the mechanism that imparted infections was highly speculative. 



\subsection{Value of Social Distancing}
The idea is to reduce person-to-person contact to make spreading the disease less likely. The effects of this are often illustrated in images such as those in the chart below, where the red plot is flattened to spread out the disease as much as possible. This helps to ensure that there are sufficient resources available for a sick population, which will help improve survival rates.

Flattening the curve to keep infection manageable (Source: Fast.ai).
How do we determine the value of such distancing strategies and model this spread?

\subsection{Modeling Disease -- SIR}


Mathematical models can simulate the effects of a disease at many levels, ranging from how the disease influences the interactions between cells in a single patient (within-host models) to how it spreads across several geographically separated populations (metapopulation models). 

Models simulating disease spread within and among populations, such as those used to forecast the COVID-19 outbreak, are typically based on the Susceptible - Infectious - Recovered (SIR) framework.

The SIR model is a compartmental model for modeling how a disease spreads through a population. It's an acronym for Susceptible, Infected, Recovered. When a disease is introduced to a population, the people move from one of these classes (or compartments) to the next. When they reach the R state, they're no longer able to be infected, depending on your interpretation, they either survived the disease and are now immune or succumbed to the illness and are out of the population.



SIR models are compartmental disease models. ``Susceptible'', ``Infectious'', and ''Recovered'' are compartments, and each individual in the population (N) is assigned to one of these compartments. To unpack this a bit further:

\begin{description}
  \item[Susceptible] individuals have no immunity to the disease (immunity can come from prior exposure, vaccination, or a mutation that confers resistance). Therefore, they can become infected. Susceptible individuals can move into the ``Infectious'' compartment through contact with an infectious person.
  \item[Infectious] people have the disease and can spread it to others. Infectious individuals can move into the ``Recovered'' compartment by recovering from the illness.
  \item[Recovered] individuals can no longer become infected, typically because they have immunity from a prior exposure. Many SIR-based models assume that a recovered person remains immune, which is often appropriate if immunity is long-lasting (e.g., chicken pox) or the disease is being modeled over a relatively short time period.
\end{description}

Because people move between compartments, the number of people in each compartment changes over time. The SIR model captures population changes in each compartment with a system of ordinary differential equations (ODEs) to model the progression of a disease.

The standard SIR model can be schematically represented as: SIR framework.png

\begin{figure}
\includegraphics[width=1.0\textwidth]{"png/SIR"}
\end{figure}



The Kermack-McKendrick model is an SIR model for the number of people infected with a contagious illness in a closed population over time. It was proposed to explain the rapid rise and fall in the number of infected patients observed in epidemics such as the plague (London 1665-1666, Bombay 1906) and cholera (London 1865). It assumes that the population size is fixed (i.e., no births, deaths due to disease, or deaths by natural causes), incubation period of the infectious agent is instantaneous, and duration of infectivity is same as length of the disease. It also assumes a completely homogeneous population with no age, spatial, or social structure.

The model consists of a system of three coupled nonlinear ordinary differential equations,

\begin{equation}\label{eq:dS}
\dv{S}{t}	=	-\beta SI	/N
\end{equation}

\begin{equation}\label{eq:dI}
\dv{I}{t}	=	\beta SI/N - \gamma I
\end{equation}

\begin{equation}\label{eq:dR}
\dv{R}{t}	=	\gamma I,
\end{equation}

\noindent where t is time, S(t) is the number of susceptible people, I(t) is the number of people infected, R(t) is the number of people who have recovered and developed immunity to the infection.

\begin{figure}
\includegraphics[width=1.0\textwidth]{"png/SIR2"}
\end{figure}

We have three ordinary differential equations in the time domain with three parameters: $\alpha$, $\beta$, $\gamma$.


\begin{figure}
\includegraphics[width=1.0\textwidth]{"png/SIR3"}
\end{figure}


\begin{itemize}

\item $\alpha$ is the inverse of the incubation period ($1/t_{incubation}$)

\item $\beta$ is the average contact rate in the population or infection rate.

\item $\gamma$ is the inverse of the mean infectious period ($1/t_{infectious}$) or recovery rate.

\end{itemize}

This system is non-linear, however it is possible to derive its analytic solution in closed-form. Other numerical tools include Monte Carlo methods.

\begin{figure}
\includegraphics[width=1.0\textwidth]{"png/SIR4"}
\end{figure}

First, note that from:

\begin{equation}
\dv{S}{t}+{\dv{I}{t}}+{\dv{R}{t}}=0,
\end{equation}

\noindent it follows that:

\begin{equation}
S(t)+I(t)+R(t)=\text{constant}=N,
\end{equation}

The key value governing the time evolution of these equations is the so-called epidemiological threshold,

\begin{equation}
 R_0=(\beta S)/ \gamma
\end{equation}
 
Note that the choice of the notation R$_0$ is a bit unfortunate, since it has nothing to do with R used for recovery. R$_0$ is defined as the number of secondary infections caused by a single primary infection; in other words, it determines the number of people infected by contact with a single infected person before their death or recovery.

\subsection{Modeling COVID-19 w/SIR  with R}

We walk through a SIR epidemiological model and simulate it with R.

First, we need to estimate the parameters: 

\begin{itemize}
\item Rate of Transmission, $\beta$ = \Sexpr{(beta = 0.5944)} % 1.4247
\item Rate of Recovery, $\gamma$ = 1/average time of infection (22 days) = \Sexpr{(gamma = round(1/22,3))} 
\end{itemize}

$\beta$ is derived by assuming that the basic reproduction number, $R_0=\frac{\beta}{ \theta} \cdot \frac{\sigma}{\sigma + \mu}$ = 2.8 (referring to Imai et al., 2020, Riou and Althaus, 2020, J.T. Wu et al., 2020, Zhao et al., 2020a, Zhao et al., 2020b) when $\alpha$=0, by using the next generation matrix approach (van den Driessche and Watmough, 2002). The time unit is in year if not mentioned.

<<>>=

library(deSolve)
sir <- function(time, state, parameters) {
  with(as.list(c(state, parameters)), {
    dS <- -beta * S * I
    dI <- beta * S * I - gamma * I
    dR <- gamma * I
	
    return(list(c(dS, dI, dR)))
  })
}

init <- c(S = 1-1e-6, I = 1e-6, 0.0)
parameters <- c(beta, gamma)
times <- seq(0, 150, by = 1)
out <- as.data.frame(ode(y = init, times = times, func = sir, parms = parameters))
out$time <- NULL
@


<<echo=FALSE>>=
matplot(times, out, type = "l", xlab = "Time", ylab = "Susceptibles and Recovereds", main = "SIR Model", lwd = 2, lty = 1, bty = "l", col = 2:4)
legend(max(times), 0.7, c("Susceptibles", "Infecteds", "Recovereds"), pch = 1, col = 2:4, xjust=1)
@


\subsection{Modeling Disease -- SEIR}

The first model is the basic SEIR without social distancing, then we add social distancing to show how the potential effectiveness of these strategies.

An extension of the classic SIR model and simply adds one more equation to show those who are exposed,  

\begin{equation}\label{eq:dE}
\dv{E}{t}	=	\beta SI/N - \omega E
\end{equation}

\begin{equation}\label{eq:dI2}
\dv{I}{t}	=	\omega E/N - \gamma I
\end{equation}


Equation \ref{eq:dS} is the change in people susceptible to the disease and is moderated by the number of infected people and their contact with the infected. Equation \ref{eq:dE} gives the people who have been exposed to the disease. It grows based on the contact rate and decreases based on the incubation period whereby people then become infected.

\subsection{SEIR with R}


In the case of $\beta$ is defined as $\beta_0$k, where $\beta_0$ is the probability of infection er expoure and k is the frequency of exposure. $\omega$ is the coeffecient of migration of latency and is estimated as $1/T_e$, where $T_e$ is the average latency. Finally, $\gamma$, which is $1/T_i$ is the recovery rate.

\begin{table}
\begin{tabular}{ll}\hline
Parameter     &  Model 1 \\  \hline\hline
$\beta_0$     & 0.1     \\
$k$           & 10      \\
$T_e$         & 7       \\
$T_i$         & 10.25 \\
\hline
\end{tabular}
\end{table}


<<>>=
SEIR <- function(beta0, k, Te, Ti){
  
# Function to return derivatives of SEIR model
seir_ode<-function(t,Y,par){
  S<-Y[1]
  E<-Y[2]
  I<-Y[3]
  R<-Y[4]
  
  beta<-par[1]
  sigma<-par[2]
  gamma<-par[3]
  mu<-par[4]
  
  dYdt<-vector(length=3)
  dYdt[1]=mu-beta*I*S-mu*S
  dYdt[2]=beta*I*S-(sigma+mu)*E
  dYdt[3]=sigma*E-(gamma+mu)*I
  
  return(list(dYdt))
}
  # Set parameter values
beta = beta0*k 
#beta<-520/365;
sigma = 1/Te
# sigma<-1/60;
gamma = 1/Ti
# gamma<-1/30;
# mu<-774835/(65640000*365) # UK birth and population figures 2016
mu=1000000
init<-c(0.8,0.1,0.1)
t<-seq(0,365)
par<-c(beta,sigma,gamma,mu)
# Solve system using lsoda
lsoda(init,t,seir_ode,par)
}

Model1 <- SEIR(.1, 10, 7, 10.25)

@


<<echo=F>>=
SEIRplot = function(sol){
# Plot solution
plot(sol[,1],sol[,2],type="l",col="blue",ylim=c(0,1),ylab="Proportion")
lines(sol[,1],sol[,3],col="orange")
lines(sol[,1],sol[,4],col="red")  
lines(sol[,1],1-rowSums(sol[,2:4]),col="green")
legend(300,0.7,legend=c("S","E","I","R"),col=c("blue","orange","red","green"), lty=1, cex=0.8, xjust=1)
}

SEIRplot(Model1)
@


\subsection{SEIR-SEI and Disease Vectors}

When diseases are spread by vectors with their own dynamics, for example malaria and mosquitos, we should add additional compartments, namely suscecptability, exposure, and infection compartments for the mosquito. Mosquitos are not born with the malaria parasite, but must be infected from a host, so we can now include additional ODEs:

\begin{equation}\label{eq:dS3}
\dv{S_v}{t}	=	-\beta_v S_v I_v	/N
\end{equation}

\begin{equation}\label{eq:dI3}
\dv{I_v}{t}	=	\beta S_v I_v/N - \gamma I_v
\end{equation}

\begin{equation}\label{eq:dR3}
\dv{R_v}{t}	=	\gamma I_v,
\end{equation}

The key value governing the time evolution of these equations is the so-called epidemiological threshold and I think this can be used to link these two models, but I don't know how to yet.

\begin{equation}
 R_0= ?
\end{equation}

<<>>=
<<>>=
# Function to return derivatives of SEIR model
seir_ode<-function(t,Y,par){
# Human Population
  S<-Y[1]
  E<-Y[2]
  I<-Y[3]
  R<-Y[4]
  
  beta<-par[1]
  sigma<-par[2]
  gamma<-par[3]
  mu<-par[4]
  
  dYdt<-vector(length=3)
  dYdt[1]=mu-beta*I*S-mu*S
  dYdt[2]=beta*I*S-(sigma+mu)*E
  dYdt[3]=sigma*E-(gamma+mu)*I
  
  return(list(dYdt))
}


# Set parameter values
beta<-520/365;
sigma<-1/60;
gamma<-1/30;
mu<-774835/(65640000*365) # UK birth and population figures 2016
init<-c(0.8,0.1,0.1)
t<-seq(0,365)
par<-c(beta,sigma,gamma,mu)
# Solve system using lsoda
sol<-lsoda(init,t,seir_ode,par)

# Plot solution
plot(t,sol[,2],type="l",col="blue",ylim=c(0,1),ylab="Proportion")
lines(t,sol[,3],col="orange")
lines(t,sol[,4],col="red")  
lines(t,1-rowSums(sol[,2:4]),col="green")
legend(300,0.7,legend=c("S","E","I","R"),col=c("blue","orange","red","green"), lty=1, cex=0.8)

@


\section{Model with Spatial Structure}

\subsection{Model Structure}

The model relies on spatially explicit movements of 'subjects' that basically bounce around in a box, i.e. petri dish. Each subject is assigned a random location and trajectory (angle) of movement and velocity of movement vector. I based the model on an Washington Post article by Harry Stevens (March 14, 2020). Although his model, written in Java and is probably much cleaner, I wanted to create something that students could use to adjust parameters and evaluate different policy strategies, using a simple visualization as a foundation. 


\subsection{Building a Model}

To track subject movements, contact with others, etc I have defined an array to track subject, thus, have to do some backflips to track overlap at each time step to see if people are sharing space and pathogens. 

I'm not a programmer, so this is going to need some TLC as it's pretty ineffecient. 

\subsection{Model Parameterization}

<<defineparameters, echo=FALSE, results='hide'>>=
coord_range = c(0, 960, 0, 540)
model = c("Model1", "Model2", "Model3", "Model4", "TBD", "Test")
N = c(50, 100, 100, 100, NA, 5); 
Tstep = c(2000, 2000, 3000, 3000, NA, 20)
velocity = c(5, 5, 5, 5, NA, 5)
#Tstep = c(50, 50, 50, 50) #4380; #Six months, hourly steps.
stationary = c(0, 0, .4, .4, NA, 0) # as a percent of N
infect_dist = c(5, 5, 5, 5, NA, 300)
asymptomatic = c(24, 24, 24, 60, NA, 24) # period of time of being exposed
symptomatic = c(96, 96, 96, 60, NA, 96) # time after exposure
recovery = 720 # 30 days to become uninfectious
init_infect = c(2, 2, 2, 2, NA, 1) # Initial number of infections

params = data.frame(Model = model, N = N, Velocity = velocity, tstep=Tstep, Stationary=stationary, Inf_Dist = infect_dist, init_infact = init_infect, asymp = asymptomatic, 
symp = symptomatic, rec = recovery); params

rm(model, N, Tstep, stationary, asymptomatic,symptomatic, recovery, init_infect, infect_dist)
@

I have define the following parameters for the model, which will be further described in each section below.

<<echo=FALSE, results='asis'>>=
xtable(params)
@

But for now, I'd like to see how these align with the equations described above.

\subsection{Model Functions}

First, functions are useful when you have repetitive actions to make -- in this case, I have defined functions to move sujects based on their speed and direction of travel. 

Since these functions rely on the data array within another function (thus, not globally available, until it it `returned` at the end fo the function), I had to include a refernece to the data in the function so that the functions could find the array.

<<Modelfunctions>>=

#create function to move the subject
move_x = function(data_array, s, t){
data_array[s, 4, t] * cos(data_array[s,3, t]*pi/180)}
move_y = function(data_array, s, t){ 
data_array[s, 4, t] * sin(data_array[s,3, t]*pi/180)}

# check function 
# move_y(data_arr, 1, 1); move_x(data_arr, 1,1)

# move function
move = function(data_array, s, t){
  c(data_array[s, 1, t-1]+ move_x(data_array, s, t-1), 
    data_array[s, 2, t-1]+ move_y(data_array, s, t-1),
    data_array[s, 3, t-1], 
    data_array[s, 4, t-1],
    data_array[s, 5, t-1],
    data_array[s, 6, t-1])
}

# Test functions
# data_arr[1,,1]
# move(data_arr, 1, 2)
# Model1; i = 2
@ 

<<infectionfunction>>=
# Contact Infection Function
contact = function(data_array, t, Infect_dist){

# testfunction
  #data_array=Model1_50; t=88; infect_dist = 5
  pairs = cbind(as.vector(data_array[,"x",t]), 
          as.vector(data_array[,"y",t])); pairs
  tmp = as.matrix(dist(pairs, method = "euclidean" )); tmp
  tmp[upper.tri(tmp, diag = TRUE)] <- NA; tmp
  pairs <- which(tmp < Infect_dist ,arr.ind = TRUE);pairs
  tmp2 = cbind(as.numeric(rownames(tmp)[pairs[, 1]]), 
               as.numeric(colnames(tmp)[pairs[, 2]])); tmp2
  contacts = dim(tmp2)[1]; contacts
  if(contacts>0){
    for(i in 1:contacts){
      # If one is exposed, susceptable is exposed
      if(data_array[tmp2[i,1],5,t]==2 & data_array[tmp2[i,2],5,t]==1){
      data_array[tmp2[i,2],5,t] = 2
      }
      # If one is exposed, susceptable is exposed
      if(data_array[tmp2[i,2],5,t]==2 & data_array[tmp2[i,1],5,t]==1){
      data_array[tmp2[i,1],5,t] = 2
      }
      # If one is symptomatic, the susceptable is exposed
      if(data_array[tmp2[i,1],5,t]==3 & data_array[tmp2[i,2],5,t]==1){
      data_array[tmp2[i,2], 5, t] = 2
      }
      # If one is symptomatic, the susceptable is exposed
      if(data_array[tmp2[i,1],5,t]==1 & data_array[tmp2[i,2],5,t]==3){
      data_array[tmp2[i,1], 5, t] = 2
      }  
    } 
    
  }
   # data_array[,,t]
return(data_array)
# print(data_array[,5,t])
} # close function

#contact(Model1, 87, 5)
@

Next, I'm going to figure out how to create a function to text for euclidian distances to spread disease, but this will take some more effort \ldots

\subsection{Model 1: Modeling Susceptability and Infections  with No Behavior Changes and Recovery}

For this model, people get instantenously sick and start spreading it around -- not very realistic because when people get sick they are usually quarantined and stop bouncing around the environment. Nevertheless this sets up a good base line, where the poputation gets ill pretty quickly. 
<<>>=
MoveSubjects = function(m=0){
# m = 0
N = params[m, 2]
Velocity = params[m, 3]
tstep = params[m, 4]
Stationary = params[m,5]; 
Infect_dist=params[m, 6]; 
Init_infect=params[m, 7]
asymp = params[m,8]
symp = params[m,9]
rec = params[m,10]

# Define Data Array
location = 6 # number of parameters to track
data_arr = array(dim=c(N, location, tstep))
dimnames(data_arr)[[2]] <- c("x", "y", "theta", "velocity", "status", "count")
data_arr[,,1]
# Initialize Start Locations
set.seed(2763)
subj_x = runif(N, coord_range[1],  coord_range[2]); subj_x
subj_y = runif(N, coord_range[3],  coord_range[4]); subj_y

# Set Up Population Characteristics and Behaviors
sheltered = sample(N*Stationary); sheltered
velocity = rep(Velocity,N); velocity[sheltered]=0; velocity
theta = round(runif(N, 0, 360),0); theta
SEIR = rep(1, N); SEIR[sheltered] = 0  
SEIR[sample(N, Init_infect)] = 3; SEIR
count = rep(0, N)

# Initial Locations
data_arr[,,1] = c(subj_x, subj_y, theta, velocity, SEIR, count)
data_arr[,,1]
# t = 2; s=1
for(t in 2:tstep){
  for(s in 1:N){
    # move subjects based on theta and speed
    data_arr[s,,t] = move(data_arr, s, t)
    # coarse corrections when hitting a boundary
    # Min x-boundary
    if(data_arr[s,1,t] < coord_range[1]){
      data_arr[s,3,t-1]=180-data_arr[s,3,t-1]
      data_arr[s,,t] = move(data_arr, s, t)
    }
    #Max x-boundary
    if(data_arr[s,1,t] > coord_range[2]){
      data_arr[s,3,t-1]=180-data_arr[s,3,t-1]
      data_arr[s,,t] = move(data_arr, s, t)
    } 
    #Min y-boundary
    if(data_arr[s,2,t] < coord_range[3]){
      data_arr[s,3,t-1]=360-data_arr[s,3,t-1]
      data_arr[s,,t] = move(data_arr, s, t) 
    }
    #Max y-boundary
    if(data_arr[s,2,t] > coord_range[4]){
      data_arr[s,3,t-1]=360-data_arr[s,3,t-1]
      data_arr[s,,t] = move(data_arr, s, t)
    }
    # Change Status based on Time Steps
    data_arr[s,6,t] = data_arr[s,6,t] + 1
    if(data_arr[s,5,t]==1 | data_arr[s,5,t]==0) data_arr[s,6,t]=0 # Reset Susceptables  
   # Exposed becomes symptomatic
  if(data_arr[s,5,t]==2 & data_arr[s,6,t] > asymp){
    data_arr[s,5,t]=3}
    # Symptomatics move very little
  if(data_arr[s,5,t]==3 & data_arr[s,6,t] > symp){
    data_arr[s,4,t] = Velocity/2}
  # Time to Recovery
  if(data_arr[s,5,t]==3 & data_arr[s,6,t] > rec){
    data_arr[s,5,t] = 4
    data_arr[s,4,t] = Velocity
    } 
  } # End of Subj Moving
  
  # Time Step Proceesing
  # Test for Euclidean Distances Here!

data_arr <- contact(data_arr, t, Infect_dist)
 
} # End of Time Step
return(data_arr)
}
@

\subsection{Model Runs}

For after running the models, I visually evaluated the models to make sure there weren't unintended consequences, i.e. usually from coding errors. Below are the models that I ran and the estimated run times. 

<<ModelRuns, eval=FALSE>>=
library(tictoc)
#N=3, tstep=4, speed=5, init_infect=1, stationary = 0)
params

tic("Model0")
Test<- MoveSubjects(m=6)
toc() # .02s

tic("Model1")
Model1<- MoveSubjects(m=1)
toc() # 900s; 314s

tic("Model2")
Model2<- MoveSubjects(m=2)
toc() #1800s; 1158s; 1313s

tic("Model3")
Model3 <- MoveSubjects(m=3)
toc() #3308; 2437s; 2599s

tic("Model4")
Model4 <- MoveSubjects(m=4)
toc() #3308s; 2332s; 2616s
@

\section{Visualizations}

\subsection{Tracking the Disease Transfer}

<<echo=T, eval=FALSE, results='hide'>>=
#load("/home/CAMPUS/mwl04747/github/beginnersluck.RData")
# Susceptable 1, Exposed-Asymptomatic 2, Symptomatic 3, Recovered 4
SEIRcol = c("steelblue", "orange","red", "green") 

trackresults=function(model,m,tstep){
results = data.frame(Days = NA, Sh = NA, S=NA, E=NA, I=NA, R=NA)
for(t in 1:tstep){
days = t/24
sh = sum(as.vector(model[,5,t])==0)
s = sum(as.vector(model[,5,t])==1, sh)
e = sum(as.vector(model[,5,t])==2)
i = sum(as.vector(model[,5,t])==3)
r = sum(as.vector(model[,5,t])==4)
results[t,] <- data.frame(Days = days, Sh = sh, S=s, E=e, I=i, R=r)
}
head(results)
par(mfrow=c(1,1), mar=c(4, 5, 3, 2)+.1, las=1)
plot(S~Days, data=results, ty='l', col=SEIRcol[1], ylab="", ylim=c(0,params[m,2]), xlab="Days", xlim=c(0,tstep/24), lwd=2, main = paste(params[m, 1], ", Stationary =", params[m,5]*100, "%"))
lines(E~Days, data=results, col=SEIRcol[2], lwd=2)
lines(I~Days, data=results, col=SEIRcol[3], lwd=2)
lines(R~Days, data=results, col=SEIRcol[4], lwd=2)
}

m = 6; trackresults(Test, m, params[m,4])

png(filename = 
  "/home/CAMPUS/mwl04747/github/beginnersluck/Epidemiology/Model1.png"); 
  m = 1; trackresults(Model1, m, 2000); dev.off()
png(filename = 
  "/home/CAMPUS/mwl04747/github/beginnersluck/Epidemiology/Model2.png"); 
  m = 2; trackresults(Model2, m, 2000); dev.off()
png(filename = 
  "/home/CAMPUS/mwl04747/github/beginnersluck/Epidemiology/Model3.png"); 
  m = 3; trackresults(Model3, m, 2000); dev.off()
png(filename = 
  "/home/CAMPUS/mwl04747/github/beginnersluck/Epidemiology/Model4.png"); 
  m = 4; trackresults(Model4, m, 2000); dev.off()
@

\begin{figure}
\includegraphics[width=1\textwidth]{Model1.png}
\caption{N = 50}
\end{figure}

\begin{figure}
\includegraphics[width=1\textwidth]{Model2.png}
\caption{N=100}
\end{figure}

\begin{figure}
\includegraphics[width=1\textwidth]{Model3.png}
\caption{40\% shelter in place}
\end{figure}

\begin{figure}
\includegraphics[width=1\textwidth]{Model4.png}
\caption{40\% shelter in place, exposed without symptoms.}
\end{figure}

\subsection{Static Spatial Plots}

Because we are looking at a dynamic system, I don't find the static plot all that useful.

<<echo=FALSE, eval = FALSE, results='hide'>>=
snapshots = function(model, tstep){
steps = c(1, round(1/3*tstep, 0), round(2/3*tstep,0), max(tstep)); steps
par(mar=c(1,1,1,1), mfrow=c(2,2))
for(t in steps){
plot(x=coord_range[1:2], y=coord_range[3:4], type='n', xlab='', ylab='', xaxt='n', yaxt='n', main=paste("Time Step =", t,"days"))
points(model[,1,t], model[,2,t], pch=19, col=SEIRcol[model[,5,t]])
}
}

png(filename = 
  "/home/CAMPUS/mwl04747/github/beginnersluck/Epidemiology/SSModel1.png");
  m = 1; snapshots(Model1, 1440); dev.off()
png(filename = 
  "/home/CAMPUS/mwl04747/github/beginnersluck/Epidemiology/SSModel2.png");
  m = 2; snapshots(Model2, 1440); dev.off()
png(filename = 
  "/home/CAMPUS/mwl04747/github/beginnersluck/Epidemiology/SSModel3.png");
  m = 3; snapshots(Model3, 1440); dev.off()
png(filename = 
  "/home/CAMPUS/mwl04747/github/beginnersluck/Epidemiology/SSModel4.png");
  m = 4; snapshots(Model4, 1440); dev.off()

@

\begin{figure}
\includegraphics[width=1\textwidth]{SSModel1.png}
\caption{N = 50}
\end{figure}

\begin{figure}
\includegraphics[width=1\textwidth]{SSModel2.png}
\caption{N=100}
\end{figure}

\begin{figure}
\includegraphics[width=1\textwidth]{SSModel3.png}
\caption{40\% shelter in place}
\end{figure}

\begin{figure}
\includegraphics[width=1\textwidth]{SSModel4.png}
\caption{40\% shelter in place, exposed without symptoms.}
\end{figure}
\subsection{Animating the Results}

Still working on this... I have to export the file to my laptop then use photoshop to make a movie.

it would be nice to do this in r and then embedd in a pdf...

<<echo=FALSE, results='hide', eval=FALSE>>=

png(filename = "/home/CAMPUS/mwl04747/github/beginnersluck/Epidemiology/png/model2/model2%04d.png", width = 960, height = 540)

# remove any margin
par(mar = c(0, 0, 0, 0))
plot(c(0, 0), type = "n", col = "white", xlim = c(0, 960), 
    ylim = c(0, 540), yaxt = "n", ann = FALSE, xaxt = "n", bty = "n")
text(400, 500, labels = paste("Model 2, N =",N,", Time Steps =", tstep))
text(380, 450, labels = paste("Proximity to infect =", Infect_distance, "units, Percent Stationary =", stationary*100, "%"))
for(j in 1:tstep){
# create blank canvas
plot(c(0, 0), type = "n", col = "white", xlim = c(-1, 960), 
    ylim = c(-5, 540), yaxt = "n", ann = FALSE, xaxt = "n", bty = "n")
points(data_arr[s,1,t], data_arr[s,2,t], pch=19, col=SEIRcol[data_arr[s,5,t]])
# TEST
# points(data_arr[1,1,], data_arr[1,2,], pch=19, col=SEIRcol[data_arr[1,5,]])
points(data_arr[20,1,], data_arr[20,2,], pch=19, col=SEIRcol[data_arr[20,5,]])
infected = round(sum(data_arr[j,5,]==3)/N*100,0)
text(150,0, labels=paste("Time Step =",j, "Infected=", infected,"%"))
}
dev.off()

zip("/home/CAMPUS/mwl04747/github/beginnersluck/Epidemiology/Model2.zip", "/home/CAMPUS/mwl04747/github/beginnersluck/Epidemiology/png/model2/")  

@


\section{SEIRS with vital dynamics}

You can also add vital dynamics to an SEIRS model, where $\mu$ and $\nu$ represent the birth and death rates, respectively. To maintain a constant population, assume that $\mu$ = $\nu$. In steady state $\frac{dI}{dt} = 0$. The ODE then becomes:

\begin{equation}
\dv{S}{t}  = \mu N - \frac{\beta S I}{N} + \xi R- \nu S
\end{equation}

\begin{equation}
\dv{E}{t}  = \frac{\beta S I}{N} - \sigma E - \nu E
\end{equation}

\begin{equation}
\dv{I}{t}  = \sigma E - \gamma I - \nu I\\
\end{equation}


\begin{equation}
\dv{R}{t}  = \gamma I - \xi R - \nu R
\end{equation}

where N = S + E + I + R is the total population.

\begin{figure}
\includegraphics[width=1\textwidth]{SEIRS.png}
\caption{SEIRS}
\end{figure}

\end{document}